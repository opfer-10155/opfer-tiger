program: ARRAY ID LBRACKET STR RBRACKET OF STR WHILE
##
## Ends in an error in state: 78.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## value -> ARRAY type_exp LBRACKET exp RBRACKET OF exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY type_exp LBRACKET exp RBRACKET OF exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY ID LBRACKET STR RBRACKET OF VAR
##
## Ends in an error in state: 77.
##
## value -> ARRAY type_exp LBRACKET exp RBRACKET OF . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY type_exp LBRACKET exp RBRACKET OF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY ID LBRACKET STR RBRACKET WHILE
##
## Ends in an error in state: 76.
##
## value -> ARRAY type_exp LBRACKET exp RBRACKET . OF exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY type_exp LBRACKET exp RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY ID LBRACKET STR WHILE
##
## Ends in an error in state: 75.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## value -> ARRAY type_exp LBRACKET exp . RBRACKET OF exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY type_exp LBRACKET exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY ID LBRACKET VAR
##
## Ends in an error in state: 38.
##
## value -> ARRAY type_exp LBRACKET . exp RBRACKET OF exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY type_exp LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY ID WHILE
##
## Ends in an error in state: 37.
##
## value -> ARRAY type_exp . LBRACKET exp RBRACKET OF exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY type_exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACE ID COLON ID COMMA WHILE
##
## Ends in an error in state: 31.
##
## separated_nonempty_list(COMMA,type_field) -> type_field COMMA . separated_nonempty_list(COMMA,type_field) [ RPAREN RBRACE ]
##
## The known suffix of the stack is as follows:
## type_field COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACE ID COLON ID RPAREN
##
## Ends in an error in state: 28.
##
## type_exp -> LBRACE type_fields . RBRACE [ VAR TYPE RPAREN RBRACKET RBRACE LBRACKET IN FUNCTION EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACE type_fields
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production separated_nonempty_list(COMMA,type_field) -> type_field
## In state 33, spurious reduction of production loption(separated_nonempty_list(COMMA,type_field)) -> separated_nonempty_list(COMMA,type_field)
## In state 34, spurious reduction of production type_fields -> loption(separated_nonempty_list(COMMA,type_field))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACE ID COLON ID WHILE
##
## Ends in an error in state: 30.
##
## separated_nonempty_list(COMMA,type_field) -> type_field . [ RPAREN RBRACE ]
## separated_nonempty_list(COMMA,type_field) -> type_field . COMMA separated_nonempty_list(COMMA,type_field) [ RPAREN RBRACE ]
##
## The known suffix of the stack is as follows:
## type_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACE ID COLON WHILE
##
## Ends in an error in state: 25.
##
## type_field -> ID COLON . type_exp [ RPAREN RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACE ID WHILE
##
## Ends in an error in state: 24.
##
## type_field -> ID . COLON type_exp [ RPAREN RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACE WHILE
##
## Ends in an error in state: 23.
##
## type_exp -> LBRACE . type_fields RBRACE [ VAR TYPE RPAREN RBRACKET RBRACE LBRACKET IN FUNCTION EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACKET ID WHILE
##
## Ends in an error in state: 35.
##
## type_exp -> LBRACKET type_exp . RBRACKET [ VAR TYPE RPAREN RBRACKET RBRACE LBRACKET IN FUNCTION EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET type_exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY LBRACKET WHILE
##
## Ends in an error in state: 22.
##
## type_exp -> LBRACKET . type_exp RBRACKET [ VAR TYPE RPAREN RBRACKET RBRACE LBRACKET IN FUNCTION EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ARRAY WHILE
##
## Ends in an error in state: 21.
##
## value -> ARRAY . type_exp LBRACKET exp RBRACKET OF exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ARRAY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID EQ STR TO STR DO STR WHILE
##
## Ends in an error in state: 83.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> FOR ID EQ exp TO exp DO exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID EQ exp TO exp DO exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID EQ STR TO STR DO VAR
##
## Ends in an error in state: 82.
##
## exp -> FOR ID EQ exp TO exp DO . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID EQ exp TO exp DO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID EQ STR TO STR WHILE
##
## Ends in an error in state: 81.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## exp -> FOR ID EQ exp TO exp . DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
##
## The known suffix of the stack is as follows:
## FOR ID EQ exp TO exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID EQ STR TO VAR
##
## Ends in an error in state: 80.
##
## exp -> FOR ID EQ exp TO . exp DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID EQ exp TO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID EQ STR WHILE
##
## Ends in an error in state: 79.
##
## bin_op_exp -> exp . PLUS exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## exp -> FOR ID EQ exp . TO exp DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ TO TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
##
## The known suffix of the stack is as follows:
## FOR ID EQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID EQ VAR
##
## Ends in an error in state: 19.
##
## exp -> FOR ID EQ . exp TO exp DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR ID WHILE
##
## Ends in an error in state: 18.
##
## exp -> FOR ID . EQ exp TO exp DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FOR WHILE
##
## Ends in an error in state: 17.
##
## exp -> FOR . ID EQ exp TO exp DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID COLONEQ STR WHILE
##
## Ends in an error in state: 74.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> left_value COLONEQ exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## left_value COLONEQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID COLONEQ VAR
##
## Ends in an error in state: 73.
##
## exp -> left_value COLONEQ . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## left_value COLONEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID DOT ID WHILE
##
## Ends in an error in state: 40.
##
## exp -> left_value . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> left_value . COLONEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## left_value -> left_value . DOT ID [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LBRACKET LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DOT DO DIVIDE COMMA COLONEQ AND ]
## left_value -> left_value . LBRACKET exp RBRACKET [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LBRACKET LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DOT DO DIVIDE COMMA COLONEQ AND ]
##
## The known suffix of the stack is as follows:
## left_value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID DOT WHILE
##
## Ends in an error in state: 71.
##
## left_value -> left_value DOT . ID [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LBRACKET LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DOT DO DIVIDE COMMA COLONEQ AND ]
##
## The known suffix of the stack is as follows:
## left_value DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID LBRACKET STR WHILE
##
## Ends in an error in state: 42.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON RBRACKET PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## left_value -> left_value LBRACKET exp . RBRACKET [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LBRACKET LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DOT DO DIVIDE COMMA COLONEQ AND ]
##
## The known suffix of the stack is as follows:
## left_value LBRACKET exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID LBRACKET VAR
##
## Ends in an error in state: 41.
##
## left_value -> left_value LBRACKET . exp RBRACKET [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LBRACKET LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DOT DO DIVIDE COMMA COLONEQ AND ]
##
## The known suffix of the stack is as follows:
## left_value LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID LPAREN STR COMMA VAR
##
## Ends in an error in state: 88.
##
## separated_nonempty_list(COMMA,exp) -> exp COMMA . separated_nonempty_list(COMMA,exp) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## exp COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID LPAREN STR WHILE
##
## Ends in an error in state: 87.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## separated_nonempty_list(COMMA,exp) -> exp . [ RPAREN ]
## separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID LPAREN VAR
##
## Ends in an error in state: 16.
##
## exp -> ID LPAREN . loption(separated_nonempty_list(COMMA,exp)) RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ID WHILE
##
## Ends in an error in state: 15.
##
## exp -> ID . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## left_value -> ID . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LBRACKET LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DOT DO DIVIDE COMMA COLONEQ AND ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF STR THEN STR ELSE STR WHILE
##
## Ends in an error in state: 94.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> IF exp THEN exp ELSE exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp ELSE exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF STR THEN STR ELSE VAR
##
## Ends in an error in state: 93.
##
## exp -> IF exp THEN exp ELSE . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF STR THEN STR WHILE
##
## Ends in an error in state: 92.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> IF exp THEN exp . ELSE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> IF exp THEN exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF STR THEN VAR
##
## Ends in an error in state: 91.
##
## exp -> IF exp THEN . exp ELSE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> IF exp THEN . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF exp THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF STR WHILE
##
## Ends in an error in state: 90.
##
## bin_op_exp -> exp . PLUS exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## exp -> IF exp . THEN exp ELSE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> IF exp . THEN exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ TIMES THEN SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
##
## The known suffix of the stack is as follows:
## IF exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IF VAR
##
## Ends in an error in state: 14.
##
## exp -> IF . exp THEN exp ELSE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> IF . exp THEN exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE ID EQ BREAK COMMA WHILE
##
## Ends in an error in state: 101.
##
## separated_nonempty_list(COMMA,field) -> field COMMA . separated_nonempty_list(COMMA,field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE ID EQ STR WHILE
##
## Ends in an error in state: 95.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON RBRACE PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE COMMA ]
## field -> ID EQ exp . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID EQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE ID EQ VAR
##
## Ends in an error in state: 12.
##
## field -> ID EQ . exp [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE ID WHILE
##
## Ends in an error in state: 11.
##
## field -> ID . EQ exp [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LBRACE WHILE
##
## Ends in an error in state: 10.
##
## value -> LBRACE . fields RBRACE [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN ID COLON ID RBRACE
##
## Ends in an error in state: 115.
##
## func_dec -> FUNCTION ID LPAREN type_fields . RPAREN EQ exp [ VAR TYPE IN FUNCTION AND ]
## func_dec -> FUNCTION ID LPAREN type_fields . RPAREN COLON type_exp EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production separated_nonempty_list(COMMA,type_field) -> type_field
## In state 33, spurious reduction of production loption(separated_nonempty_list(COMMA,type_field)) -> separated_nonempty_list(COMMA,type_field)
## In state 34, spurious reduction of production type_fields -> loption(separated_nonempty_list(COMMA,type_field))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN COLON ID EQ STR WHILE
##
## Ends in an error in state: 122.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN COLON type_exp EQ exp . [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN COLON type_exp EQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN COLON ID EQ VAR
##
## Ends in an error in state: 121.
##
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN COLON type_exp EQ . exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN COLON type_exp EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN COLON ID WHILE
##
## Ends in an error in state: 120.
##
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN COLON type_exp . EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN COLON type_exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 119.
##
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN COLON . type_exp EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN EQ BREAK AND WHILE
##
## Ends in an error in state: 134.
##
## separated_nonempty_list(AND,func_dec) -> func_dec AND . separated_nonempty_list(AND,func_dec) [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## func_dec AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN EQ STR WHILE
##
## Ends in an error in state: 118.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE AND ]
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN EQ exp . [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN EQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN EQ VAR
##
## Ends in an error in state: 117.
##
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN EQ . exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 116.
##
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN . EQ exp [ VAR TYPE IN FUNCTION AND ]
## func_dec -> FUNCTION ID LPAREN type_fields RPAREN . COLON type_exp EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN type_fields RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID LPAREN WHILE
##
## Ends in an error in state: 114.
##
## func_dec -> FUNCTION ID LPAREN . type_fields RPAREN EQ exp [ VAR TYPE IN FUNCTION AND ]
## func_dec -> FUNCTION ID LPAREN . type_fields RPAREN COLON type_exp EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION ID WHILE
##
## Ends in an error in state: 113.
##
## func_dec -> FUNCTION ID . LPAREN type_fields RPAREN EQ exp [ VAR TYPE IN FUNCTION AND ]
## func_dec -> FUNCTION ID . LPAREN type_fields RPAREN COLON type_exp EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET FUNCTION WHILE
##
## Ends in an error in state: 112.
##
## func_dec -> FUNCTION . ID LPAREN type_fields RPAREN EQ exp [ VAR TYPE IN FUNCTION AND ]
## func_dec -> FUNCTION . ID LPAREN type_fields RPAREN COLON type_exp EQ exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET TYPE ID EQ ID AND WHILE
##
## Ends in an error in state: 125.
##
## separated_nonempty_list(AND,type_dec) -> type_dec AND . separated_nonempty_list(AND,type_dec) [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## type_dec AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET TYPE ID EQ ID WHILE
##
## Ends in an error in state: 124.
##
## separated_nonempty_list(AND,type_dec) -> type_dec . [ VAR TYPE IN FUNCTION ]
## separated_nonempty_list(AND,type_dec) -> type_dec . AND separated_nonempty_list(AND,type_dec) [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## type_dec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET TYPE ID EQ WHILE
##
## Ends in an error in state: 110.
##
## type_dec -> TYPE ID EQ . type_exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## TYPE ID EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET TYPE ID WHILE
##
## Ends in an error in state: 109.
##
## type_dec -> TYPE ID . EQ type_exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET TYPE WHILE
##
## Ends in an error in state: 108.
##
## type_dec -> TYPE . ID EQ type_exp [ VAR TYPE IN FUNCTION AND ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID COLON ID EQ STR WHILE
##
## Ends in an error in state: 107.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## var_dec -> VAR ID COLON type_exp EQ exp . [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON type_exp EQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID COLON ID EQ VAR
##
## Ends in an error in state: 106.
##
## var_dec -> VAR ID COLON type_exp EQ . exp [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON type_exp EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID COLON ID WHILE
##
## Ends in an error in state: 105.
##
## var_dec -> VAR ID COLON type_exp . EQ exp [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON type_exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID COLON WHILE
##
## Ends in an error in state: 104.
##
## var_dec -> VAR ID COLON . type_exp EQ exp [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID EQ BREAK IN STR WHILE
##
## Ends in an error in state: 131.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ END DIVIDE ]
## exp -> LET nonempty_list(decs) IN exp . END [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LET nonempty_list(decs) IN exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID EQ BREAK IN VAR
##
## Ends in an error in state: 130.
##
## exp -> LET nonempty_list(decs) IN . exp END [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LET nonempty_list(decs) IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID EQ STR WHILE
##
## Ends in an error in state: 103.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ DIVIDE ]
## var_dec -> VAR ID EQ exp . [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID EQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID EQ VAR
##
## Ends in an error in state: 9.
##
## var_dec -> VAR ID EQ . exp [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR ID WHILE
##
## Ends in an error in state: 8.
##
## var_dec -> VAR ID . EQ exp [ VAR TYPE IN FUNCTION ]
## var_dec -> VAR ID . COLON type_exp EQ exp [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET VAR WHILE
##
## Ends in an error in state: 7.
##
## var_dec -> VAR . ID EQ exp [ VAR TYPE IN FUNCTION ]
## var_dec -> VAR . ID COLON type_exp EQ exp [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LET WHILE
##
## Ends in an error in state: 6.
##
## exp -> LET . nonempty_list(decs) IN exp END [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN STR WHILE
##
## Ends in an error in state: 138.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
## exp -> LPAREN exp . RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON RPAREN PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DIVIDE ]
##
## The known suffix of the stack is as follows:
## LPAREN exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: LPAREN VAR
##
## Ends in an error in state: 5.
##
## exp -> LPAREN . exp RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: MINUS VAR
##
## Ends in an error in state: 4.
##
## exp -> MINUS . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR DIVIDE VAR
##
## Ends in an error in state: 50.
##
## bin_op_exp -> exp DIVIDE . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp DIVIDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR EQEQ STR WHILE
##
## Ends in an error in state: 70.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp EQEQ exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp EQEQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR EQEQ VAR
##
## Ends in an error in state: 69.
##
## bin_op_exp -> exp EQEQ . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp EQEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR GEQ STR WHILE
##
## Ends in an error in state: 68.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp GEQ exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp GEQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR GEQ VAR
##
## Ends in an error in state: 67.
##
## bin_op_exp -> exp GEQ . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp GEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR GT STR WHILE
##
## Ends in an error in state: 66.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp GT exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp GT exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR GT VAR
##
## Ends in an error in state: 65.
##
## bin_op_exp -> exp GT . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LAND STR WHILE
##
## Ends in an error in state: 57.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp LAND exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LAND exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LAND VAR
##
## Ends in an error in state: 56.
##
## bin_op_exp -> exp LAND . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LEQ STR WHILE
##
## Ends in an error in state: 64.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp LEQ exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LEQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LEQ VAR
##
## Ends in an error in state: 63.
##
## bin_op_exp -> exp LEQ . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LOR STR WHILE
##
## Ends in an error in state: 55.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp LOR exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LOR exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LOR VAR
##
## Ends in an error in state: 54.
##
## bin_op_exp -> exp LOR . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LT STR WHILE
##
## Ends in an error in state: 62.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp LT exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LT exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR LT VAR
##
## Ends in an error in state: 61.
##
## bin_op_exp -> exp LT . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR MINUS STR WHILE
##
## Ends in an error in state: 53.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp MINUS exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp MINUS exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR MINUS VAR
##
## Ends in an error in state: 52.
##
## bin_op_exp -> exp MINUS . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR NEQ STR WHILE
##
## Ends in an error in state: 60.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp NEQ exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp NEQ exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR NEQ VAR
##
## Ends in an error in state: 59.
##
## bin_op_exp -> exp NEQ . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR PLUS STR WHILE
##
## Ends in an error in state: 49.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp PLUS exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp PLUS exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR PLUS VAR
##
## Ends in an error in state: 48.
##
## bin_op_exp -> exp PLUS . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR SEMICOLON STR WHILE
##
## Ends in an error in state: 47.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp SEMICOLON exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp SEMICOLON exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR SEMICOLON VAR
##
## Ends in an error in state: 46.
##
## exp -> exp SEMICOLON . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR TIMES VAR
##
## Ends in an error in state: 43.
##
## bin_op_exp -> exp TIMES . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## exp TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STR WHILE
##
## Ends in an error in state: 145.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ EOF DIVIDE ]
## program -> exp . EOF [ # ]
##
## The known suffix of the stack is as follows:
## exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WHILE STR DO STR WHILE
##
## Ends in an error in state: 143.
##
## bin_op_exp -> exp . PLUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . MINUS exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . TIMES exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . DIVIDE exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GT exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . GEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LAND exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . LOR exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . EQEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## bin_op_exp -> exp . NEQ exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> WHILE exp DO exp . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE exp DO exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WHILE STR DO VAR
##
## Ends in an error in state: 142.
##
## exp -> WHILE exp DO . exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE exp DO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WHILE STR WHILE
##
## Ends in an error in state: 141.
##
## bin_op_exp -> exp . PLUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . MINUS exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . TIMES exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . DIVIDE exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . GT exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . GEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LAND exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . LOR exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . EQEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## bin_op_exp -> exp . NEQ exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
## exp -> WHILE exp . DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
## exp -> exp . SEMICOLON exp [ TIMES SEMICOLON PLUS NEQ MINUS LT LOR LEQ LAND GT GEQ EQEQ DO DIVIDE ]
##
## The known suffix of the stack is as follows:
## WHILE exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WHILE VAR
##
## Ends in an error in state: 1.
##
## exp -> WHILE . exp DO exp [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACKET RBRACE PLUS NEQ MINUS LT LOR LEQ LAND IN GT GEQ FUNCTION EQEQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

